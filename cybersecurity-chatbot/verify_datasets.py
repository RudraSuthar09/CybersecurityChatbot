import os
import json
from datetime import datetime

def check_file_exists(filepath, description):
    if os.path.exists(filepath):
        size = os.path.getsize(filepath) / (1024 * 1024)  # Convert to MB
        return f"✅ {description:<40} ({size:.2f} MB)"
    return f"❌ {description:<40} (Missing)"

def verify_datasets():
    base_dir = "datasets"
    
    print("\n🔍 Cybersecurity Datasets Verification Report")
    print("=" * 70)
    print(f"Generated at: {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC")
    print(f"Generated by: {os.getenv('USERNAME', 'RudraSuthar09')}")
    print("=" * 70)
    
    # 1. CVE Database
    print("\n📁 Vulnerabilities Dataset:")
    cve_dir = os.path.join(base_dir, "vulnerabilities", "cve")
    for year in range(2023, 2026):
        print(check_file_exists(
            os.path.join(cve_dir, f"nvdcve-1.1-{year}.json.gz"),
            f"CVE Database {year}"
        ))
    
    # 2. PhishTank Data
    print("\n📁 Phishing Dataset:")
    print(check_file_exists(
        os.path.join(base_dir, "phishing", "phishtank", "sample_phishing_data.json"),
        "PhishTank Sample Data"
    ))
    
    # 3. OWASP Data
    print("\n📁 OWASP Security Dataset:")
    owasp_dir = os.path.join(base_dir, "security", "owasp")
    print(check_file_exists(
        os.path.join(owasp_dir, "owasp_security_data.json"),
        "OWASP Top 10 Data"
    ))
    print(check_file_exists(
        os.path.join(owasp_dir, "security_guidelines.md"),
        "OWASP Security Guidelines"
    ))
    
    # 4. NIST Framework
    print("\n📁 NIST Framework Dataset:")
    nist_dir = os.path.join(base_dir, "security", "nist")
    print(check_file_exists(
        os.path.join(nist_dir, "nist_cybersecurity_framework.json"),
        "NIST Framework Data"
    ))
    print(check_file_exists(
        os.path.join(nist_dir, "nist_framework_guidelines.md"),
        "NIST Framework Guidelines"
    ))
    
    print("\n" + "=" * 70)
    print("Directory Structure:")
    print("=" * 70)
    
    for root, dirs, files in os.walk(base_dir):
        level = root.replace(base_dir, '').count(os.sep)
        indent = '  ' * level
        print(f"{indent}📁 {os.path.basename(root)}/")
        for file in files:
            print(f"{indent}  📄 {file}")

if __name__ == "__main__":
    verify_datasets()